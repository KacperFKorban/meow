pages = [{"l":"index.html","n":"meow","t":"meow","d":""},
{"l":"index.html","n":"Meow","t":"Meow","d":""},
{"l":"api/index.html","n":"API","t":" API","d":"api"},
{"l":"api/meow.html","n":"meow","t":"package meow","d":"meow"},
{"l":"api/meow/prelude$.html","n":"prelude","t":"object prelude","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"~>","t":"type ~>[-F[_], +G[_]] = [A] => (x$1: F[A]) => G[A]","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"<$>","t":"def <$>[F[_], A, B](fa: F[A])(using `x$3`: Functor[F]): F[B]","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"Functor_Option","t":"given Functor_Option: given_Functor_Option","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"Functor_List","t":"given Functor_List: given_Functor_List","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"Functor_Vector","t":"given Functor_Vector: given_Functor_Vector","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"<$","t":"def <$[F[_], A, B](fb: F[B])(using `x$3`: Functor[F]): F[A]","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"Applicative_Option","t":"given Applicative_Option: given_Applicative_Option","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"Applicative_List","t":"given Applicative_List: given_Applicative_List","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"Applicative_Vector","t":"given Applicative_Vector: given_Applicative_Vector","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"Monad_List","t":"given Monad_List: given_Monad_List","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"Monad_Option","t":"given Monad_Option: given_Monad_Option","d":"meow/prelude$"},
{"l":"api/meow/prelude$.html","n":"MonadError_Unit_Option","t":"given MonadError_Unit_Option: given_MonadError_Unit_Option","d":"meow/prelude$"},
{"l":"api/meow/control.html","n":"meow.control","t":"package meow.control","d":"meow/control"},
{"l":"api/meow/control/apRan.html","n":"apRan","t":"given apRan[G[_]]: Applicative[[_] =>> Ran[G, G, _$13]]","d":"meow/control"},
{"l":"api/meow/control/apRan.html","n":"pure","t":"def pure[A](a: A): Ran[G, G, A]","d":"meow/control"},
{"l":"api/meow/control/apRan.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Ran[G, G, A] => Ran[G, G, B] => Ran[G, G, C]","d":"meow/control"},
{"l":"api/meow/control/given_Functor_Ran.html","n":"given_Functor_Ran","t":"given given_Functor_Ran[G[_], H[_]]: Functor[[_] =>> Ran[G, H, _$11]]","d":"meow/control"},
{"l":"api/meow/control/given_Functor_Ran.html","n":"fmap","t":"def fmap[A, B](f: A => B): Ran[G, H, A] => Ran[G, H, B]","d":"meow/control"},
{"l":"api/meow/control/given_Monad_Ran.html","n":"given_Monad_Ran","t":"given given_Monad_Ran[G[_]]: Monad[[_] =>> Ran[G, G, _$15]]","d":"meow/control"},
{"l":"api/meow/control/given_Monad_Ran.html","n":"bind","t":"def bind[A, B](f: A => Ran[G, G, B]): Ran[G, G, A] => Ran[G, G, B]","d":"meow/control"},
{"l":"api/meow/control/Alternative.html","n":"Alternative","t":"trait Alternative[F[_]]","d":"meow/control/Alternative"},
{"l":"api/meow/control/Alternative.html","n":"empty","t":"def empty[A]: F[A]","d":"meow/control/Alternative"},
{"l":"api/meow/control/Alternative.html","n":"<|>","t":"def <|>[A, B](fb: F[A]): F[A]","d":"meow/control/Alternative"},
{"l":"api/meow/control/Alternative.html","n":"some","t":"def some[A, B]: F[List[A]]","d":"meow/control/Alternative"},
{"l":"api/meow/control/Alternative.html","n":"many","t":"def many[A, B]: F[List[A]]","d":"meow/control/Alternative"},
{"l":"api/meow/control/Applicative.html","n":"Applicative","t":"trait Applicative[F[_]]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative.html","n":"pure","t":"def pure[A](a: A): F[A]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): F[A] => F[B] => F[C]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative.html","n":"<*>","t":"def <*>[A, B](fa: F[A]): F[B]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative.html","n":"*>","t":"def *>[A, B](fb: F[B]): F[B]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative.html","n":"<*","t":"def <*[A, B](fb: F[B]): F[A]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative.html","n":"<**>","t":"def <**>[A, B](fab: F[A => B]): F[B]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative.html","n":"when","t":"def when[A, B](cond: Boolean): F[Unit]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative.html","n":"unless","t":"def unless[A, B](cond: Boolean): F[Unit]","d":"meow/control/Applicative"},
{"l":"api/meow/control/Applicative$.html","n":"Applicative","t":"object Applicative","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$.html","n":"pure","t":"def pure[F[_]]: [A] => (a: A) => Applicative[F] => F[A]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$.html","n":"liftA2","t":"def liftA2[F[_]]: [A, B, C] => (f: A => B => C) => Applicative[F] => F[A] => F[B] => F[C]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$.html","n":"liftA","t":"def liftA[F[_]]: [A, B] => (f: A => B) => F[A] => Applicative[F] => F[B]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$.html","n":"liftA3","t":"def liftA3[F[_]]: [A, B, C, D] => (f: A => B => C => D) => F[A] => F[B] => F[C] => Applicative[F] => F[D]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$.html","n":"when","t":"def when[F[_]]: Boolean => [A] => (doThing: F[A]) => Applicative[F] => F[Unit]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$.html","n":"unless","t":"def unless[F[_]]: Boolean => [A] => (doThing: F[A]) => Applicative[F] => F[Unit]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"given_Applicative_List","t":"given given_Applicative_List: Applicative[List]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"pure","t":"def pure[A](a: A): List[A]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): List[A] => List[B] => List[C]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"given_Applicative_Vector","t":"given given_Applicative_Vector: Applicative[Vector]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"pure","t":"def pure[A](a: A): Vector[A]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Vector[A] => Vector[B] => Vector[C]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"given_Applicative_Option","t":"given given_Applicative_Option: Applicative[[A] =>> Option[A]]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"pure","t":"def pure[A](a: A): Option[A]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Option[A] => Option[B] => Option[C]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Future.html","n":"given_Applicative_Future","t":"given given_Applicative_Future(using `x$1`: ExecutionContext): Applicative[[T] =>> Future[T]]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Future.html","n":"`x$1`","t":"val `x$1`: ExecutionContext","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Future.html","n":"pure","t":"def pure[A](a: A): Future[A]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Future.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Future[A] => Future[B] => Future[C]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"given_Applicative_Either","t":"given given_Applicative_Either[E]: Applicative[[_] =>> Either[E, _$8]]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"pure","t":"def pure[A](a: A): Either[E, A]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Either[E, A] => Either[E, B] => Either[E, C]","d":"meow/control/Applicative$"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"given_Applicative_List","t":"given given_Applicative_List: Applicative[List]","d":"meow/control/Applicative$$given_Applicative_List$"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"pure","t":"def pure[A](a: A): List[A]","d":"meow/control/Applicative$$given_Applicative_List$"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): List[A] => List[B] => List[C]","d":"meow/control/Applicative$$given_Applicative_List$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"given_Applicative_Vector","t":"given given_Applicative_Vector: Applicative[Vector]","d":"meow/control/Applicative$$given_Applicative_Vector$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"pure","t":"def pure[A](a: A): Vector[A]","d":"meow/control/Applicative$$given_Applicative_Vector$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Vector[A] => Vector[B] => Vector[C]","d":"meow/control/Applicative$$given_Applicative_Vector$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"given_Applicative_Option","t":"given given_Applicative_Option: Applicative[[A] =>> Option[A]]","d":"meow/control/Applicative$$given_Applicative_Option$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"pure","t":"def pure[A](a: A): Option[A]","d":"meow/control/Applicative$$given_Applicative_Option$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Option[A] => Option[B] => Option[C]","d":"meow/control/Applicative$$given_Applicative_Option$"},
{"l":"api/meow/control/Applicative$$given_Applicative_Future.html","n":"given_Applicative_Future","t":"given given_Applicative_Future(using `x$1`: ExecutionContext): Applicative[[T] =>> Future[T]]","d":"meow/control/Applicative$$given_Applicative_Future"},
{"l":"api/meow/control/Applicative$$given_Applicative_Future.html","n":"`x$1`","t":"val `x$1`: ExecutionContext","d":"meow/control/Applicative$$given_Applicative_Future"},
{"l":"api/meow/control/Applicative$$given_Applicative_Future.html","n":"pure","t":"def pure[A](a: A): Future[A]","d":"meow/control/Applicative$$given_Applicative_Future"},
{"l":"api/meow/control/Applicative$$given_Applicative_Future.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Future[A] => Future[B] => Future[C]","d":"meow/control/Applicative$$given_Applicative_Future"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"given_Applicative_Either","t":"given given_Applicative_Either[E]: Applicative[[_] =>> Either[E, _$8]]","d":"meow/control/Applicative$$given_Applicative_Either"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"pure","t":"def pure[A](a: A): Either[E, A]","d":"meow/control/Applicative$$given_Applicative_Either"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Either[E, A] => Either[E, B] => Either[E, C]","d":"meow/control/Applicative$$given_Applicative_Either"},
{"l":"api/meow/control/Lan.html","n":"Lan","t":"enum Lan","d":"meow/control/Lan"},
{"l":"api/meow/control/Lan$$LeftKan.html","n":"LeftKan","t":"case LeftKan extends LeftKan[G, H, A, B]","d":"meow/control/Lan"},
{"l":"api/meow/control/Lan$$LeftKan.html","n":"LeftKan","t":"case LeftKan extends LeftKan[G, H, A, B]","d":"meow/control/Lan$$LeftKan"},
{"l":"api/meow/control/Lan$.html","n":"Lan","t":"object Lan","d":"meow/control/Lan$"},
{"l":"api/meow/control/Lan$.html","n":"toLan","t":"def toLan[K[_], G[_], H[_], B](nat: [A] => (x$1: H[A]) => K[G[A]])(lan: Lan[G, H, B])(using Functor[K]): K[B]","d":"meow/control/Lan$"},
{"l":"api/meow/control/Lan$.html","n":"fromLan","t":"def fromLan[K[_], G[_], H[_], B](s: [A] => (x$1: Lan[G, H, A]) => K[A])(hb: H[B]): K[G[B]]","d":"meow/control/Lan$"},
{"l":"api/meow/control/Lan$.html","n":"glan","t":"def glan[G[_], H[_]]: [A] => (x$1: H[A]) => Lan[G, H, G[A]]","d":"meow/control/Lan$"},
{"l":"api/meow/control/Monad.html","n":"Monad","t":"trait Monad[F[_]]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad.html","n":"bind","t":"def bind[A, B](f: A => F[B]): F[A] => F[B]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad.html","n":"flatMap","t":"def flatMap[A, B](f: A => F[B]): F[B]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad.html","n":">>=","t":"def >>=[A, B](f: A => F[B]): F[B]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad.html","n":">>","t":"def >>[A, B](fb: F[B]): F[B]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad.html","n":"=<<","t":"def =<<[A, B, C](ma: F[A]): F[B]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad.html","n":">=>","t":"def >=>[A, B, C](ff: B => F[C]): A => F[C]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad.html","n":"<=<","t":"def <=<[A, B, C](ff: C => F[A]): C => F[B]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad.html","n":"flatten","t":"def flatten[A]: F[A]","d":"meow/control/Monad"},
{"l":"api/meow/control/Monad$.html","n":"Monad","t":"object Monad","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$.html","n":"flatMap","t":"def flatMap[M[_]]: [A, B] => (f: A => M[B]) => M[A] => Monad[M] => M[B]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$.html","n":"flatten","t":"def flatten[M[_], A]: M[M[A]] => Monad[M] => M[A]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$.html","n":"liftM","t":"def liftM[M[_]](`evidence$2`: Monad[M], `evidence$3`: Functor[M]): [A, B] => (f: A => B) => M[A] => M[B]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_Option$.html","n":"given_Monad_Option","t":"given given_Monad_Option: Monad[[A] =>> Option[A]]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_Option$.html","n":"bind","t":"def bind[A, B](f: A => Option[B]): Option[A] => Option[B]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_List$.html","n":"given_Monad_List","t":"given given_Monad_List: Monad[List]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_List$.html","n":"bind","t":"def bind[A, B](f: A => List[B]): List[A] => List[B]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_Either.html","n":"given_Monad_Either","t":"given given_Monad_Either[E]: Monad[[_] =>> Either[E, _$6]]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_Either.html","n":"bind","t":"def bind[A, B](f: A => Either[E, B]): Either[E, A] => Either[E, B]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_Future.html","n":"given_Monad_Future","t":"given given_Monad_Future(using `x$1`: ExecutionContext): Monad[[T] =>> Future[T]]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_Future.html","n":"`x$1`","t":"val `x$1`: ExecutionContext","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_Future.html","n":"bind","t":"def bind[A, B](f: A => Future[B]): Future[A] => Future[B]","d":"meow/control/Monad$"},
{"l":"api/meow/control/Monad$$given_Monad_Option$.html","n":"given_Monad_Option","t":"given given_Monad_Option: Monad[[A] =>> Option[A]]","d":"meow/control/Monad$$given_Monad_Option$"},
{"l":"api/meow/control/Monad$$given_Monad_Option$.html","n":"bind","t":"def bind[A, B](f: A => Option[B]): Option[A] => Option[B]","d":"meow/control/Monad$$given_Monad_Option$"},
{"l":"api/meow/control/Monad$$given_Monad_List$.html","n":"given_Monad_List","t":"given given_Monad_List: Monad[List]","d":"meow/control/Monad$$given_Monad_List$"},
{"l":"api/meow/control/Monad$$given_Monad_List$.html","n":"bind","t":"def bind[A, B](f: A => List[B]): List[A] => List[B]","d":"meow/control/Monad$$given_Monad_List$"},
{"l":"api/meow/control/Monad$$given_Monad_Either.html","n":"given_Monad_Either","t":"given given_Monad_Either[E]: Monad[[_] =>> Either[E, _$6]]","d":"meow/control/Monad$$given_Monad_Either"},
{"l":"api/meow/control/Monad$$given_Monad_Either.html","n":"bind","t":"def bind[A, B](f: A => Either[E, B]): Either[E, A] => Either[E, B]","d":"meow/control/Monad$$given_Monad_Either"},
{"l":"api/meow/control/Monad$$given_Monad_Future.html","n":"given_Monad_Future","t":"given given_Monad_Future(using `x$1`: ExecutionContext): Monad[[T] =>> Future[T]]","d":"meow/control/Monad$$given_Monad_Future"},
{"l":"api/meow/control/Monad$$given_Monad_Future.html","n":"`x$1`","t":"val `x$1`: ExecutionContext","d":"meow/control/Monad$$given_Monad_Future"},
{"l":"api/meow/control/Monad$$given_Monad_Future.html","n":"bind","t":"def bind[A, B](f: A => Future[B]): Future[A] => Future[B]","d":"meow/control/Monad$$given_Monad_Future"},
{"l":"api/meow/control/MonadError.html","n":"MonadError","t":"trait MonadError[E, M[_]](using monad: Monad[M])","d":"meow/control/MonadError"},
{"l":"api/meow/control/MonadError.html","n":"throwError","t":"def throwError[A](e: E): M[A]","d":"meow/control/MonadError"},
{"l":"api/meow/control/MonadError.html","n":"catchError","t":"def catchError[A](ma: M[A]): E => M[A] => M[A]","d":"meow/control/MonadError"},
{"l":"api/meow/control/MonadError.html","n":"recover","t":"def recover[A](f: E => M[A]): M[A]","d":"meow/control/MonadError"},
{"l":"api/meow/control/MonadError$.html","n":"MonadError","t":"object MonadError","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$.html","n":"catchError","t":"def catchError[M[_], E, A](ma: M[A])(using me: MonadError[E, M]): E => M[A] => M[A]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$.html","n":"throwError","t":"def throwError[M[_], E](e: E): [A] => (m: MonadError[E, M]) => M[A]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Unit_Option$.html","n":"given_MonadError_Unit_Option","t":"given given_MonadError_Unit_Option: MonadError[Unit, [A] =>> Option[A]]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Unit_Option$.html","n":"throwError","t":"def throwError[A](e: Unit): Option[A]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Unit_Option$.html","n":"catchError","t":"def catchError[A](ma: Option[A]): Unit => Option[A] => Option[A]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_E_Either.html","n":"given_MonadError_E_Either","t":"given given_MonadError_E_Either[E]: MonadError[E, [_] =>> Either[E, _$5]]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_E_Either.html","n":"throwError","t":"def throwError[A](e: E): Either[E, A]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_E_Either.html","n":"catchError","t":"def catchError[A](ma: Either[E, A]): E => Either[E, A] => Either[E, A]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Throwable_Future.html","n":"given_MonadError_Throwable_Future","t":"given given_MonadError_Throwable_Future(using `x$1`: ExecutionContext): MonadError[Throwable, [T] =>> Future[T]]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Throwable_Future.html","n":"`x$1`","t":"val `x$1`: ExecutionContext","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Throwable_Future.html","n":"throwError","t":"def throwError[A](e: Throwable): Future[A]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Throwable_Future.html","n":"catchError","t":"def catchError[A](ma: Future[A]): Throwable => Future[A] => Future[A]","d":"meow/control/MonadError$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Unit_Option$.html","n":"given_MonadError_Unit_Option","t":"given given_MonadError_Unit_Option: MonadError[Unit, [A] =>> Option[A]]","d":"meow/control/MonadError$$given_MonadError_Unit_Option$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Unit_Option$.html","n":"throwError","t":"def throwError[A](e: Unit): Option[A]","d":"meow/control/MonadError$$given_MonadError_Unit_Option$"},
{"l":"api/meow/control/MonadError$$given_MonadError_Unit_Option$.html","n":"catchError","t":"def catchError[A](ma: Option[A]): Unit => Option[A] => Option[A]","d":"meow/control/MonadError$$given_MonadError_Unit_Option$"},
{"l":"api/meow/control/MonadError$$given_MonadError_E_Either.html","n":"given_MonadError_E_Either","t":"given given_MonadError_E_Either[E]: MonadError[E, [_] =>> Either[E, _$5]]","d":"meow/control/MonadError$$given_MonadError_E_Either"},
{"l":"api/meow/control/MonadError$$given_MonadError_E_Either.html","n":"throwError","t":"def throwError[A](e: E): Either[E, A]","d":"meow/control/MonadError$$given_MonadError_E_Either"},
{"l":"api/meow/control/MonadError$$given_MonadError_E_Either.html","n":"catchError","t":"def catchError[A](ma: Either[E, A]): E => Either[E, A] => Either[E, A]","d":"meow/control/MonadError$$given_MonadError_E_Either"},
{"l":"api/meow/control/MonadError$$given_MonadError_Throwable_Future.html","n":"given_MonadError_Throwable_Future","t":"given given_MonadError_Throwable_Future(using `x$1`: ExecutionContext): MonadError[Throwable, [T] =>> Future[T]]","d":"meow/control/MonadError$$given_MonadError_Throwable_Future"},
{"l":"api/meow/control/MonadError$$given_MonadError_Throwable_Future.html","n":"`x$1`","t":"val `x$1`: ExecutionContext","d":"meow/control/MonadError$$given_MonadError_Throwable_Future"},
{"l":"api/meow/control/MonadError$$given_MonadError_Throwable_Future.html","n":"throwError","t":"def throwError[A](e: Throwable): Future[A]","d":"meow/control/MonadError$$given_MonadError_Throwable_Future"},
{"l":"api/meow/control/MonadError$$given_MonadError_Throwable_Future.html","n":"catchError","t":"def catchError[A](ma: Future[A]): Throwable => Future[A] => Future[A]","d":"meow/control/MonadError$$given_MonadError_Throwable_Future"},
{"l":"api/meow/control/MonadReader.html","n":"MonadReader","t":"trait MonadReader[R, M[_]]","d":"meow/control/MonadReader"},
{"l":"api/meow/control/MonadReader.html","n":"ask","t":"def ask: M[R]","d":"meow/control/MonadReader"},
{"l":"api/meow/control/MonadReader.html","n":"local","t":"def local[A](rr: R => R): M[A] => M[A]","d":"meow/control/MonadReader"},
{"l":"api/meow/control/MonadReader.html","n":"reader","t":"def reader[A](f: R => A): M[A]","d":"meow/control/MonadReader"},
{"l":"api/meow/control/MonadReader$.html","n":"MonadReader","t":"object MonadReader","d":"meow/control/MonadReader$"},
{"l":"api/meow/control/MonadTrans.html","n":"MonadTrans","t":"trait MonadTrans[T[_[_], _], M[_]]","d":"meow/control/MonadTrans"},
{"l":"api/meow/control/MonadTrans.html","n":"lift","t":"def lift[A](ma: M[A]): T[M, A]","d":"meow/control/MonadTrans"},
{"l":"api/meow/control/MonadTrans$.html","n":"MonadTrans","t":"object MonadTrans","d":"meow/control/MonadTrans$"},
{"l":"api/meow/control/MonadTrans$.html","n":"lift","t":"def lift[T[_[_], _], M[_], A](ma: M[A])(`evidence$4`: Functor[M], `evidence$5`: Applicative[M], `evidence$6`: Monad[M], mt: MonadTrans[[M[_], A] =>> T[M, A], M]): T[M, A]","d":"meow/control/MonadTrans$"},
{"l":"api/meow/control/Ran.html","n":"Ran","t":"class Ran[G[_], H[_], A](run: [B] => (x$1: A => G[B]) => H[B])","d":"meow/control/Ran"},
{"l":"api/meow/control/Ran$.html","n":"Ran","t":"object Ran","d":"meow/control/Ran$"},
{"l":"api/meow/control/Ran$.html","n":"toRan","t":"def toRan[K[_], G[_], H[_], B](nat: [A] => (x$1: K[G[A]]) => H[A])(kb: K[B])(using Functor[K]): Ran[G, H, B]","d":"meow/control/Ran$"},
{"l":"api/meow/control/Ran$.html","n":"fromRan","t":"def fromRan[K[_], G[_], H[_], B](kran: [A] => (x$1: K[A]) => Ran[G, H, A])(kgb: K[G[B]]): H[B]","d":"meow/control/Ran$"},
{"l":"api/meow/control/apRan.html","n":"apRan","t":"given apRan[G[_]]: Applicative[[_] =>> Ran[G, G, _$13]]","d":"meow/control/apRan"},
{"l":"api/meow/control/apRan.html","n":"pure","t":"def pure[A](a: A): Ran[G, G, A]","d":"meow/control/apRan"},
{"l":"api/meow/control/apRan.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Ran[G, G, A] => Ran[G, G, B] => Ran[G, G, C]","d":"meow/control/apRan"},
{"l":"api/meow/control/given_Functor_Ran.html","n":"given_Functor_Ran","t":"given given_Functor_Ran[G[_], H[_]]: Functor[[_] =>> Ran[G, H, _$11]]","d":"meow/control/given_Functor_Ran"},
{"l":"api/meow/control/given_Functor_Ran.html","n":"fmap","t":"def fmap[A, B](f: A => B): Ran[G, H, A] => Ran[G, H, B]","d":"meow/control/given_Functor_Ran"},
{"l":"api/meow/control/given_Monad_Ran.html","n":"given_Monad_Ran","t":"given given_Monad_Ran[G[_]]: Monad[[_] =>> Ran[G, G, _$15]]","d":"meow/control/given_Monad_Ran"},
{"l":"api/meow/control/given_Monad_Ran.html","n":"bind","t":"def bind[A, B](f: A => Ran[G, G, B]): Ran[G, G, A] => Ran[G, G, B]","d":"meow/control/given_Monad_Ran"},
{"l":"api/meow/control/trans.html","n":"meow.control.trans","t":"package meow.control.trans","d":"meow/control/trans"},
{"l":"api/meow/control/trans.html","n":"OptionT","t":"type OptionT[M[_], A]","d":"meow/control/trans"},
{"l":"api/meow/control/trans.html","n":"Reader","t":"type Reader[R, A]","d":"meow/control/trans"},
{"l":"api/meow/control/trans.html","n":"ReaderT","t":"type ReaderT[R, M[_], A]","d":"meow/control/trans"},
{"l":"api/meow/control/trans/OptionT$.html","n":"OptionT","t":"object OptionT","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"given_Functor_OptionT","t":"given given_Functor_OptionT[M[_]](using val functorM: Functor[M]): Functor[[_] =>> OptionT[M, _$3]]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"functorM","t":"val functorM: Functor[M]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"fmap","t":"def fmap[A, B](f: A => B): OptionT[M, A] => OptionT[M, B]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"given_Applicative_OptionT","t":"given given_Applicative_OptionT[M[_]](`evidence$1`: Functor[M], val apM: Applicative[M]): Applicative[[_] =>> OptionT[M, _$5]]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"apM","t":"val apM: Applicative[M]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"pure","t":"def pure[A](a: A): OptionT[M, A]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): OptionT[M, A] => OptionT[M, B] => OptionT[M, C]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"given_Monad_OptionT","t":"given given_Monad_OptionT[M[_]](`evidence$2`: Applicative[M], `evidence$3`: Functor[M], val monad: Monad[M]): Monad[[_] =>> OptionT[M, _$7]]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"monad","t":"val monad: Monad[M]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"bind","t":"def bind[A, B](f: A => OptionT[M, B]): OptionT[M, A] => OptionT[M, B]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"given_MonadError_E_OptionT","t":"given given_MonadError_E_OptionT[E, M[_]](`evidence$4`: Functor[M], `evidence$5`: Applicative[M], `evidence$6`: Monad[M], val me: MonadError[E, M]): MonadError[E, [_] =>> OptionT[M, _$9]]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"me","t":"val me: MonadError[E, M]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"throwError","t":"def throwError[A](e: E): OptionT[M, A]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"catchError","t":"def catchError[A](ma: OptionT[M, A]): E => OptionT[M, A] => OptionT[M, A]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadTrans_OptionT_M.html","n":"given_MonadTrans_OptionT_M","t":"given given_MonadTrans_OptionT_M[M[_]]: MonadTrans[OptionT, M]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadTrans_OptionT_M.html","n":"lift","t":"def lift[A](ma: M[A]): OptionT[M, A]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"given_MonadReader_R_OptionT","t":"given given_MonadReader_R_OptionT[R, M[_]](`evidence$10`: Monad[M], `evidence$11`: Applicative[M], `evidence$12`: Functor[M], val readM: MonadReader[R, M]): MonadReader[R, [_] =>> OptionT[M, _$12]]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"readM","t":"val readM: MonadReader[R, M]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"ask","t":"def ask: OptionT[M, R]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"local","t":"def local[A](rr: R => R): OptionT[M, A] => OptionT[M, A]","d":"meow/control/trans/OptionT$"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"given_Functor_OptionT","t":"given given_Functor_OptionT[M[_]](using val functorM: Functor[M]): Functor[[_] =>> OptionT[M, _$3]]","d":"meow/control/trans/OptionT$$given_Functor_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"functorM","t":"val functorM: Functor[M]","d":"meow/control/trans/OptionT$$given_Functor_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"fmap","t":"def fmap[A, B](f: A => B): OptionT[M, A] => OptionT[M, B]","d":"meow/control/trans/OptionT$$given_Functor_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"given_Applicative_OptionT","t":"given given_Applicative_OptionT[M[_]](`evidence$1`: Functor[M], val apM: Applicative[M]): Applicative[[_] =>> OptionT[M, _$5]]","d":"meow/control/trans/OptionT$$given_Applicative_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"apM","t":"val apM: Applicative[M]","d":"meow/control/trans/OptionT$$given_Applicative_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"pure","t":"def pure[A](a: A): OptionT[M, A]","d":"meow/control/trans/OptionT$$given_Applicative_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): OptionT[M, A] => OptionT[M, B] => OptionT[M, C]","d":"meow/control/trans/OptionT$$given_Applicative_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"given_Monad_OptionT","t":"given given_Monad_OptionT[M[_]](`evidence$2`: Applicative[M], `evidence$3`: Functor[M], val monad: Monad[M]): Monad[[_] =>> OptionT[M, _$7]]","d":"meow/control/trans/OptionT$$given_Monad_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"monad","t":"val monad: Monad[M]","d":"meow/control/trans/OptionT$$given_Monad_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"bind","t":"def bind[A, B](f: A => OptionT[M, B]): OptionT[M, A] => OptionT[M, B]","d":"meow/control/trans/OptionT$$given_Monad_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"given_MonadError_E_OptionT","t":"given given_MonadError_E_OptionT[E, M[_]](`evidence$4`: Functor[M], `evidence$5`: Applicative[M], `evidence$6`: Monad[M], val me: MonadError[E, M]): MonadError[E, [_] =>> OptionT[M, _$9]]","d":"meow/control/trans/OptionT$$given_MonadError_E_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"me","t":"val me: MonadError[E, M]","d":"meow/control/trans/OptionT$$given_MonadError_E_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"throwError","t":"def throwError[A](e: E): OptionT[M, A]","d":"meow/control/trans/OptionT$$given_MonadError_E_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"catchError","t":"def catchError[A](ma: OptionT[M, A]): E => OptionT[M, A] => OptionT[M, A]","d":"meow/control/trans/OptionT$$given_MonadError_E_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_MonadTrans_OptionT_M.html","n":"given_MonadTrans_OptionT_M","t":"given given_MonadTrans_OptionT_M[M[_]]: MonadTrans[OptionT, M]","d":"meow/control/trans/OptionT$$given_MonadTrans_OptionT_M"},
{"l":"api/meow/control/trans/OptionT$$given_MonadTrans_OptionT_M.html","n":"lift","t":"def lift[A](ma: M[A]): OptionT[M, A]","d":"meow/control/trans/OptionT$$given_MonadTrans_OptionT_M"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"given_MonadReader_R_OptionT","t":"given given_MonadReader_R_OptionT[R, M[_]](`evidence$10`: Monad[M], `evidence$11`: Applicative[M], `evidence$12`: Functor[M], val readM: MonadReader[R, M]): MonadReader[R, [_] =>> OptionT[M, _$12]]","d":"meow/control/trans/OptionT$$given_MonadReader_R_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"readM","t":"val readM: MonadReader[R, M]","d":"meow/control/trans/OptionT$$given_MonadReader_R_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"ask","t":"def ask: OptionT[M, R]","d":"meow/control/trans/OptionT$$given_MonadReader_R_OptionT"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"local","t":"def local[A](rr: R => R): OptionT[M, A] => OptionT[M, A]","d":"meow/control/trans/OptionT$$given_MonadReader_R_OptionT"},
{"l":"api/meow/control/trans/ReaderT$.html","n":"ReaderT","t":"object ReaderT","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$.html","n":"ask","t":"def ask[R, M[_]](using apM: Applicative[M]): (R, M) => R","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"given_Functor_ReaderT","t":"given given_Functor_ReaderT[R, M[_]](using val functorM: Functor[M]): Functor[[_] =>> (R, M) => _$4]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"functorM","t":"val functorM: Functor[M]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"fmap","t":"def fmap[A, B](f: A => B): ReaderT[R, M, A] => ReaderT[R, M, B]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"given_Applicative_ReaderT","t":"given given_Applicative_ReaderT[R, M[_]](`evidence$1`: Functor[M], val apM: Applicative[M]): Applicative[[_] =>> (R, M) => _$6]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"apM","t":"val apM: Applicative[M]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"pure","t":"def pure[A](a: A): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): ReaderT[R, M, A] => ReaderT[R, M, B] => ReaderT[R, M, C]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"given_Monad_ReaderT","t":"given given_Monad_ReaderT[R, M[_]](`evidence$2`: Applicative[M], `evidence$3`: Functor[M], val monad: Monad[M]): Monad[[_] =>> (R, M) => _$8]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"monad","t":"val monad: Monad[M]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"bind","t":"def bind[A, B](f: A => ReaderT[R, M, B]): ReaderT[R, M, A] => ReaderT[R, M, B]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M.html","n":"given_MonadTrans_ReaderT_M","t":"given given_MonadTrans_ReaderT_M[M[_], R]: MonadTrans[[M[_], A] =>> (R, M) => A, M]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M.html","n":"lift","t":"def lift[A](ma: M[A]): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"given_MonadError_E_ReaderT","t":"given given_MonadError_E_ReaderT[E, R, M[_]](`evidence$7`: Applicative[M], `evidence$8`: Functor[M], `evidence$9`: Monad[M], val me: MonadError[E, M], val mt: MonadTrans[[M[_], A] =>> (R, M) => A, M]): MonadError[E, [_] =>> (R, M) => _$13]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"me","t":"val me: MonadError[E, M]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"mt","t":"val mt: MonadTrans[[M[_], A] =>> ReaderT[R, M, A], M]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"throwError","t":"def throwError[A](e: E): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"catchError","t":"def catchError[A](ma: ReaderT[R, M, A]): E => ReaderT[R, M, A] => ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"given_MonadReader_R_ReaderT","t":"given given_MonadReader_R_ReaderT[R, M[_]]: MonadReader[R, [_] =>> (R, M) => _$15]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"ask","t":"def ask: ReaderT[R, M, R]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"local","t":"def local[A](rr: R => R): ReaderT[R, M, A] => ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"given_Functor_ReaderT","t":"given given_Functor_ReaderT[R, M[_]](using val functorM: Functor[M]): Functor[[_] =>> (R, M) => _$4]","d":"meow/control/trans/ReaderT$$given_Functor_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"functorM","t":"val functorM: Functor[M]","d":"meow/control/trans/ReaderT$$given_Functor_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"fmap","t":"def fmap[A, B](f: A => B): ReaderT[R, M, A] => ReaderT[R, M, B]","d":"meow/control/trans/ReaderT$$given_Functor_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"given_Applicative_ReaderT","t":"given given_Applicative_ReaderT[R, M[_]](`evidence$1`: Functor[M], val apM: Applicative[M]): Applicative[[_] =>> (R, M) => _$6]","d":"meow/control/trans/ReaderT$$given_Applicative_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"apM","t":"val apM: Applicative[M]","d":"meow/control/trans/ReaderT$$given_Applicative_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"pure","t":"def pure[A](a: A): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_Applicative_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): ReaderT[R, M, A] => ReaderT[R, M, B] => ReaderT[R, M, C]","d":"meow/control/trans/ReaderT$$given_Applicative_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"given_Monad_ReaderT","t":"given given_Monad_ReaderT[R, M[_]](`evidence$2`: Applicative[M], `evidence$3`: Functor[M], val monad: Monad[M]): Monad[[_] =>> (R, M) => _$8]","d":"meow/control/trans/ReaderT$$given_Monad_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"monad","t":"val monad: Monad[M]","d":"meow/control/trans/ReaderT$$given_Monad_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"bind","t":"def bind[A, B](f: A => ReaderT[R, M, B]): ReaderT[R, M, A] => ReaderT[R, M, B]","d":"meow/control/trans/ReaderT$$given_Monad_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M.html","n":"given_MonadTrans_ReaderT_M","t":"given given_MonadTrans_ReaderT_M[M[_], R]: MonadTrans[[M[_], A] =>> (R, M) => A, M]","d":"meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M.html","n":"lift","t":"def lift[A](ma: M[A]): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"given_MonadError_E_ReaderT","t":"given given_MonadError_E_ReaderT[E, R, M[_]](`evidence$7`: Applicative[M], `evidence$8`: Functor[M], `evidence$9`: Monad[M], val me: MonadError[E, M], val mt: MonadTrans[[M[_], A] =>> (R, M) => A, M]): MonadError[E, [_] =>> (R, M) => _$13]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"me","t":"val me: MonadError[E, M]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"mt","t":"val mt: MonadTrans[[M[_], A] =>> ReaderT[R, M, A], M]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"throwError","t":"def throwError[A](e: E): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"catchError","t":"def catchError[A](ma: ReaderT[R, M, A]): E => ReaderT[R, M, A] => ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"given_MonadReader_R_ReaderT","t":"given given_MonadReader_R_ReaderT[R, M[_]]: MonadReader[R, [_] =>> (R, M) => _$15]","d":"meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"ask","t":"def ask: ReaderT[R, M, R]","d":"meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"local","t":"def local[A](rr: R => R): ReaderT[R, M, A] => ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT"},
{"l":"api/meow/data.html","n":"meow.data","t":"package meow.data","d":"meow/data"},
{"l":"api/meow/data/Functor.html","n":"Functor","t":"trait Functor[F[_]]","d":"meow/data/Functor"},
{"l":"api/meow/data/Functor.html","n":"fmap","t":"def fmap[A, B](f: A => B): F[A] => F[B]","d":"meow/data/Functor"},
{"l":"api/meow/data/Functor.html","n":"map","t":"def map[A, B](f: A => B): F[B]","d":"meow/data/Functor"},
{"l":"api/meow/data/Functor.html","n":"<#>","t":"def <#>[A, B](f: A => B): F[B]","d":"meow/data/Functor"},
{"l":"api/meow/data/Functor.html","n":"$>","t":"def $>[A, B](a: B): F[B]","d":"meow/data/Functor"},
{"l":"api/meow/data/Functor.html","n":"void","t":"def void[A, B]: F[Unit]","d":"meow/data/Functor"},
{"l":"api/meow/data/Functor$.html","n":"Functor","t":"object Functor","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$.html","n":"map","t":"def map[F[_]](using Functor[F]): [A, B] => (f: A => B) => F[A] => F[B]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$.html","n":"<$>","t":"def <$>[F[_], A, B](fa: F[A])(using Functor[F]): F[B]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$.html","n":"<$","t":"def <$[F[_], A, B](fb: F[B])(using Functor[F]): F[A]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Option$.html","n":"given_Functor_Option","t":"given given_Functor_Option: Functor[[A] =>> Option[A]]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Option$.html","n":"fmap","t":"def fmap[A, B](f: A => B): Option[A] => Option[B]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Function.html","n":"given_Functor_Function","t":"given given_Functor_Function[R]: Functor[[_] =>> R => _$5]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Function.html","n":"fmap","t":"def fmap[A, B](f: A => B): R => A => R => B","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_List$.html","n":"given_Functor_List","t":"given given_Functor_List: Functor[List]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_List$.html","n":"fmap","t":"def fmap[A, B](f: A => B): List[A] => List[B]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Vector$.html","n":"given_Functor_Vector","t":"given given_Functor_Vector: Functor[Vector]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Vector$.html","n":"fmap","t":"def fmap[A, B](f: A => B): Vector[A] => Vector[B]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_R__$6.html","n":"given_Functor_R__$6","t":"given given_Functor_R__$6[R]: Functor[[_] =>> (R, _$6)]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_R__$6.html","n":"fmap","t":"def fmap[A, B](f: A => B): (R, A) => (R, B)","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Either.html","n":"given_Functor_Either","t":"given given_Functor_Either[E]: Functor[[_] =>> Either[E, _$7]]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Either.html","n":"fmap","t":"def fmap[A, B](f: A => B): Either[E, A] => Either[E, B]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Future.html","n":"given_Functor_Future","t":"given given_Functor_Future(using `x$1`: ExecutionContext): Functor[[T] =>> Future[T]]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Future.html","n":"`x$1`","t":"val `x$1`: ExecutionContext","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Future.html","n":"fmap","t":"def fmap[A, B](f: A => B): Future[A] => Future[B]","d":"meow/data/Functor$"},
{"l":"api/meow/data/Functor$$given_Functor_Option$.html","n":"given_Functor_Option","t":"given given_Functor_Option: Functor[[A] =>> Option[A]]","d":"meow/data/Functor$$given_Functor_Option$"},
{"l":"api/meow/data/Functor$$given_Functor_Option$.html","n":"fmap","t":"def fmap[A, B](f: A => B): Option[A] => Option[B]","d":"meow/data/Functor$$given_Functor_Option$"},
{"l":"api/meow/data/Functor$$given_Functor_Function.html","n":"given_Functor_Function","t":"given given_Functor_Function[R]: Functor[[_] =>> R => _$5]","d":"meow/data/Functor$$given_Functor_Function"},
{"l":"api/meow/data/Functor$$given_Functor_Function.html","n":"fmap","t":"def fmap[A, B](f: A => B): R => A => R => B","d":"meow/data/Functor$$given_Functor_Function"},
{"l":"api/meow/data/Functor$$given_Functor_List$.html","n":"given_Functor_List","t":"given given_Functor_List: Functor[List]","d":"meow/data/Functor$$given_Functor_List$"},
{"l":"api/meow/data/Functor$$given_Functor_List$.html","n":"fmap","t":"def fmap[A, B](f: A => B): List[A] => List[B]","d":"meow/data/Functor$$given_Functor_List$"},
{"l":"api/meow/data/Functor$$given_Functor_Vector$.html","n":"given_Functor_Vector","t":"given given_Functor_Vector: Functor[Vector]","d":"meow/data/Functor$$given_Functor_Vector$"},
{"l":"api/meow/data/Functor$$given_Functor_Vector$.html","n":"fmap","t":"def fmap[A, B](f: A => B): Vector[A] => Vector[B]","d":"meow/data/Functor$$given_Functor_Vector$"},
{"l":"api/meow/data/Functor$$given_Functor_R__$6.html","n":"given_Functor_R__$6","t":"given given_Functor_R__$6[R]: Functor[[_] =>> (R, _$6)]","d":"meow/data/Functor$$given_Functor_R__$6"},
{"l":"api/meow/data/Functor$$given_Functor_R__$6.html","n":"fmap","t":"def fmap[A, B](f: A => B): (R, A) => (R, B)","d":"meow/data/Functor$$given_Functor_R__$6"},
{"l":"api/meow/data/Functor$$given_Functor_Either.html","n":"given_Functor_Either","t":"given given_Functor_Either[E]: Functor[[_] =>> Either[E, _$7]]","d":"meow/data/Functor$$given_Functor_Either"},
{"l":"api/meow/data/Functor$$given_Functor_Either.html","n":"fmap","t":"def fmap[A, B](f: A => B): Either[E, A] => Either[E, B]","d":"meow/data/Functor$$given_Functor_Either"},
{"l":"api/meow/data/Functor$$given_Functor_Future.html","n":"given_Functor_Future","t":"given given_Functor_Future(using `x$1`: ExecutionContext): Functor[[T] =>> Future[T]]","d":"meow/data/Functor$$given_Functor_Future"},
{"l":"api/meow/data/Functor$$given_Functor_Future.html","n":"`x$1`","t":"val `x$1`: ExecutionContext","d":"meow/data/Functor$$given_Functor_Future"},
{"l":"api/meow/data/Functor$$given_Functor_Future.html","n":"fmap","t":"def fmap[A, B](f: A => B): Future[A] => Future[B]","d":"meow/data/Functor$$given_Functor_Future"},
{"l":"api/meow/data/Identity.html","n":"Identity","t":"class Identity[A](run: A)","d":"meow/data/Identity"}];